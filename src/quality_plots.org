* Plots on Scaling and tree quality
** imports
#+BEGIN_SRC python
import pandas as pd
import plotly as px
import plotly.graph_objects as go
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#+END_SRC

** Read Data
#+BEGIN_SRC python
data = pd.read_pickle("../output/commulated_results_scores_rank_car.pkl")

test = data[data.type == "Test"]
train = data[data.type == "Train"]

x = [i*2 for i in range(1,11)] # depth
y = [i for i in range(2,11)] # number of trees in rf
#+END_SRC

** prepare data
#+BEGIN_SRC python
z_train = [[train[train.depth==depth][train.rf==rf]["Accuracy_avg"].iloc[0] for rf in y] for depth in x]
z_test = [[test[test.depth==depth][test.rf==rf]["Accuracy_avg"].iloc[0] for rf in y] for depth in x]
z_gen_error = [[test[test.depth==depth][test.rf==rf]["gen_error"].iloc[0] for rf in y] for depth in x]

z_dtree_scale = [[train[train.depth==depth][train.rf==rf]["dtree-scale"].iloc[0] for rf in y] for depth in x]
z_interordinal_predicate_scale = [[train[train.depth==depth][train.rf==rf]["interordinal-predicate-scale"].iloc[0] for rf in y] for depth in x]
z_tree_predicate_scale = [[train[train.depth==depth][train.rf==rf]["tree-predicate-scale"].iloc[0] for rf in y] for depth in x]
z_nominal_scale = [[train[train.depth==depth][train.rf==rf]["nominal-scale"].iloc[0] for rf in y] for depth in x]
#+END_SRC
** Plots
*** Tree Quality
#+BEGIN_SRC python
fig, axs = plt.subplots(ncols=2,subplot_kw={'projection': '3d'})
axs[0].plot_trisurf(test['rf'], test['depth'], test['Accuracy_avg'], cmap=plt.cm.magma, linewidth=0.2)
axs[0].set_title("Test Accuracy")
axs[0].set_xlabel("Number of Trees")
axs[0].set_ylabel("Max Depth")
axs[0].set_zlabel("Accuracy")

axs[1].plot_trisurf(test['rf'], test['depth'], train['Accuracy_avg'].values - test['Accuracy_avg'].values, cmap=plt.cm.magma, linewidth=0.2)
axs[1].set_title("Generalization Error")
axs[1].set_xlabel("Number of Trees")
axs[1].set_ylabel("Max Depth")
axs[1].set_zlabel("Train Acc - Test Acc")
plt.subplots_adjust(right=1.2)
plt.show()
#+END_SRC
*** Lattice Sizes
#+BEGIN_SRC python
fig, axs = plt.subplots(ncols=2,nrows=2,subplot_kw={'projection': '3d'})
axs[0][0].plot_trisurf(train['rf'], train['depth'], train['nominal-scale'], cmap=plt.cm.magma, linewidth=0.2)
axs[0][0].set_title("Nominal Scale")
axs[0][0].set_xlabel("Number of Trees")
axs[0][0].set_ylabel("Max Depth")
axs[0][0].set_zlabel("Concepts")

axs[0][1].plot_trisurf(train['rf'], train['depth'], train['dtree-scale'], cmap=plt.cm.magma, linewidth=0.2)
axs[0][1].set_title("Tree Scale")
axs[0][1].set_xlabel("Number of Trees")
axs[0][1].set_ylabel("Max Depth")
axs[0][1].set_zlabel("Concepts")

axs[1][0].plot_trisurf(train['rf'], train['depth'], train['tree-predicate-scale'], cmap=plt.cm.magma, linewidth=0.2)
axs[1][0].set_title("Tree Predicate Scale")
axs[1][0].set_xlabel("Number of Trees")
axs[1][0].set_ylabel("Max Depth")
axs[1][0].set_zlabel("Concepts")

axs[1][1].plot_trisurf(train['rf'], train['depth'], train['interordinal-predicate-scale'], cmap=plt.cm.magma, linewidth=0.2)
axs[1][1].set_title("Interordinal Predicate Scale")
axs[1][1].set_xlabel("Number of Trees")
axs[1][1].set_ylabel("Max Depth")
axs[1][1].set_zlabel("Concepts")

plt.subplots_adjust(right=1.2,top=1.7)
plt.show()
#+END_SRC
